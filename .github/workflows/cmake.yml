name: C++ CI

on:
  push:
    branches: [libs/sfml] # replace with main (if applicable)
    tags: ['*']
  pull_request:
    branches: [master] # replace with main (if applicable)

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      CC: ${{ matrix.c }}
      CXX: ${{ matrix.cxx }}
      SFML_VERSION: "2021-11-18"
      BUILD_TYPE: Release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
            c: gcc-10
            cxx: g++-10
            name: Ubuntu 20.04 GCC 10
            cmake_flags: -DBUILD_SHARED_LIBS=FALSE
          - os: ubuntu-20.04
            c: clang-11
            cxx: clang++-11
            name: Ubuntu 20.04 Clang 11
            cmake_flags: -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -DBUILD_SHARED_LIBS=FALSE
          - os: macos-11
            c: clang
            cxx: clang++
            name: macOS 11 Apple Clang 13
            cmake_flags: -DSFML_BUILD_FRAMEWORKS=FALSE -DSFML_DEPENDENCIES_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts -DBUILD_SHARED_LIBS=FALSE
#          - os: macos-11
#            c: gcc-11
#            cxx: g++-11
#            name: macOS 11 GCC 11
#            cmake_flags: -DSFML_BUILD_FRAMEWORKS=FALSE -DSFML_DEPENDENCIES_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts -DBUILD_SHARED_LIBS=FALSE
          - os: windows-2022
            c: cl
            cxx: cl
            name: Windows 2022 MSVC 19.30
            cmake_flags: -DBUILD_SHARED_LIBS=TRUE
          - os: windows-2022
            c: gcc
            cxx: g++
            name: Windows 2022 GCC 10
            cmake_flags: -DBUILD_SHARED_LIBS=TRUE
            cmake_generator: "\"MinGW Makefiles\""

    steps:
      - uses: actions/checkout@v2

      - name: Run clang-tidy
        uses: HorstBaerbel/action-clang-tidy@1.2
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
        # These are optional (defaults displayed)
        with:
          scandir: '.'
          builddir: 'build'
          excludedirs: ''
          extensions: 'c,h,C,H,cpp,hpp,cc,hh,c++,h++,cxx,hxx'
          cmakeoptions: -S $GITHUB_WORKSPACE -B . \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts \
            ${{matrix.cmake_flags}}

      - name: Prepare env
        shell: bash
        run: |
          echo $GITHUB_WORKSPACE
          # mkdir $GITHUB_WORKSPACE/build
          mkdir $GITHUB_WORKSPACE/artifacts

      # taken from SFML Github Actions
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install \
            libxrandr-dev \
            libxcursor-dev \
            libudev-dev \
            libopenal-dev \
            libflac-dev \
            libvorbis-dev \
            libgl1-mesa-dev \
            libegl1-mesa-dev

      - name: Cache tools
        uses: actions/cache@v2
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
#        if: matrix.cxx == 'clang++'
        id: cache-tools
        with:
          path: tools
          key: tools

      - name: Build tools
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11' && steps.cache-tools.outputs.cache-hit != 'true'
#        if: matrix.cxx == 'clang++' && steps.cache-tools.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir tools/
          wget https://github.com/danmar/cppcheck/archive/2.6.zip
          unzip 2.6.zip
          rm 2.6.zip
          mv cppcheck-2.6 tools/cppcheck-2.6
          cd tools/cppcheck-2.6
          mkdir build
          cmake -S . -B build
          cmake --build build -j6

      - name: Install tools
          # Right now I am too lazy to figure out caching for this step
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
        shell: bash
        run: |
          cd tools/cppcheck-2.6
          sudo cmake --install build
          # echo "$GITHUB_WORKSPACE/tools/cppcheck-2.6/build/bin" >> $GITHUB_PATH
          # adds cppcheck to path; otherwise, refer to cppcheck as ./tools/cppcheck-2.6/build/bin/cppcheck
          #
          # build other tools here

      - name: Cache deps
        uses: actions/cache@v2
        id: cache-deps
        with:
          path: |
            build/_deps
          key: ${{ matrix.os }}-${{ matrix.cxx }}-${{ env.SFML_VERSION }}

      - name: Cache MinGW
        uses: actions/cache@v2
        id: cache-mingw
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        with:
          path: gcc
          key: ${{ runner.os }}-gcc-10

      - name: Download toolchain (MinGW)
        uses: suisei-cn/actions-download-file@v1
        id: downloadgcc
        if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
        with:
          url: "https://github.com/brechtsanders/winlibs_mingw/releases/download/10.3.0-12.0.0-9.0.0-r2/winlibs-x86_64-posix-seh-gcc-10.3.0-mingw-w64-9.0.0-r2.7z"
          target: compiler

      - name: Install toolchain (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++' && steps.cache-mingw.outputs.cache-hit != 'true'
        shell: bash
        run: |
          7z x compiler/winlibs-x86_64-posix-seh-gcc-10.3.0-mingw-w64-9.0.0-r2.7z -ogcc

      - name: Configure CMake (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          PATH="$(pwd)/../gcc/mingw64/bin:$PATH"
          CMAKE_GENERATOR=${{ matrix.cmake_generator }} cmake -S $GITHUB_WORKSPACE -B . \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts \
            ${{matrix.cmake_flags}}

      - name: Configure CMake
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        # https://github.com/saxbophone/CPP20-Cross-Platform-Template
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          CMAKE_GENERATOR=${{ matrix.cmake_generator }} cmake -S $GITHUB_WORKSPACE -B . \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts \
            ${{matrix.cmake_flags}}

      - name: Cppcheck
        if: runner.os == 'Linux' && matrix.cxx == 'clang++-11'
        shell: bash
        run: cppcheck --project=build/compile_commands.json -ibuild --suppress='*:build/*' --error-exitcode=1

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -j6

      - name: Install
        # working-directory: ${{ github.workspace }}/build
        shell: bash
        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
        run: cmake --install build --config $BUILD_TYPE --prefix artifacts

      - name: Copy stdlib (MinGW)
        if: runner.os == 'Windows' && matrix.cxx == 'g++'
        shell: bash
        run: |
          cp gcc/mingw64/bin/libstdc++-6.dll $GITHUB_WORKSPACE/artifacts

      - name: Set Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        # trim prefix from ref to get tag name
        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> $GITHUB_ENV

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          type: 'zip'
          path: artifacts
          filename: release_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release_${{ env.TAG_NAME }}_${{ matrix.os }}_${{ matrix.cxx }}.zip
