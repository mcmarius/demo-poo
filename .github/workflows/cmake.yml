name: C++ CI

on:
  push:
    branches: [libs/sfml] # replace with main (if applicable)
    tags: ['*']
  pull_request:
    branches: [master] # replace with main (if applicable)

jobs:
  build:
    runs-on: ${{ matrix.os }}
    env:
      SFML_VERSION: "2021-11-18"
      BUILD_TYPE: Release
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-20-04, c: gcc-10,   cxx: g++-10,     name: Ubuntu 20.04 GCC 10,       cmake_flags: -DBUILD_SHARED_LIBS=FALSE }
          - { os: ubuntu-20-04, c: clang-11, cxx: clang++-11, name: Ubuntu 20.04 Clang 11,     cmake_flags: -DBUILD_SHARED_LIBS=FALSE }
          - { os: macos-11,     c: clang-13, cxx: clang++-13, name: macOS 11 Apple Clang 13,   cmake_flags: -DSFML_BUILD_FRAMEWORKS=FALSE -DSFML_DEPENDENCIES_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts -DBUILD_SHARED_LIBS=FALSE }
          - { os: macos-11,     c: gcc-11,   cxx: g++-11,     name: macOS 11 GCC 11,           cmake_flags: -DSFML_BUILD_FRAMEWORKS=FALSE -DSFML_DEPENDENCIES_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts -DBUILD_SHARED_LIBS=FALSE }
          - { os: windows-2022, c: cl,       cxx: cl,         name: Windows 2022 MSVC 19.??,   cmake_flags: -DBUILD_SHARED_LIBS=TRUE }
          - { os: windows-2022, c: gcc,      cxx: g++,        name: Windows 2022 MinGW GCC 11, cmake_flags: -DBUILD_SHARED_LIBS=TRUE, cmake_generator: Ninja }

    steps:
      - uses: actions/checkout@v2

      - name: Prepare env
        shell: bash
        run: |
          echo $GITHUB_WORKSPACE
          mkdir $GITHUB_WORKSPACE/build
          mkdir $GITHUB_WORKSPACE/artifacts

      # taken from SFML Github Actions
      - name: Install Linux Dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install \
            libxrandr-dev \
            libxcursor-dev \
            libudev-dev \
            libopenal-dev \
            libflac-dev \
            libvorbis-dev \
            libgl1-mesa-dev \
            libegl1-mesa-dev

      - name: Cache tools
        uses: actions/cache@v2
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-11'
        id: cache-tools
        with:
          path: tools
          key: tools

      - name: Setup tools
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-11' && steps.cache-tools.outputs.cache-hit != 'true'
        shell: bash
        run: |
          mkdir tools/
          wget https://github.com/danmar/cppcheck/archive/2.6.zip
          unzip 2.6.zip
          rm 2.6.zip
          mv cppcheck-2.6 tools/cppcheck-2.6
          cd tools/cppcheck-2.6
          mkdir build
          cmake -S . -B build
          cmake --build build -j6
          echo "$GITHUB_WORKSPACE/tools/cppcheck-2.6/build/bin" >> $GITHUB_PATH
          # adds cppcheck to path; otherwise, refer to cppcheck as ./tools/cppcheck-2.6/build/bin/cppcheck
          #
          # build other tools here

      - name: Cache deps
        uses: actions/cache@v2
        id: cache-deps
        with:
          path: |
            build/_deps
          key: ${{ matrix.config.os }}-${{ runner.os }}-${{ matrix.config.cxx }}-${{ env.SFML_VERSION }}

      - name: Configure CMake
        env:
          C: ${{ matrix.config.c }}
          CXX: ${{ matrix.config.cxx }}
        # Use a bash shell so we can use the same syntax for environment variable
        # access regardless of the host operating system
        # https://github.com/saxbophone/CPP20-Cross-Platform-Template
        shell: bash
        working-directory: ${{ github.workspace }}/build
        run: |
          CMAKE_GENERATOR=${{ matrix.config.cmake_generator }} cmake -S $GITHUB_WORKSPACE -B . \
          -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
          -DCMAKE_EXPORT_COMPILE_COMMANDS=ON \
          -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/artifacts ${{matrix.config.cmake_config_flags}}

      - name: Cppcheck
        if: runner.os == 'Linux' && matrix.config.cxx == 'clang++-11'
        shell: bash
        run: cppcheck --project=build/compile_commands.json -ibuild --suppress='*:build/*' --error-exitcode=1

      - name: Build
        working-directory: ${{ github.workspace }}/build
        shell: bash
        # Execute the build.  You can specify a specific target with "--target <NAME>"
        run: cmake --build . --config $BUILD_TYPE -j6

      - name: Install
        # working-directory: ${{ github.workspace }}/build
        shell: bash
        # Use CMake to "install" build artifacts (only interested in CMake registered targets) to our custom artifacts directory
        run: cmake --install build --config $BUILD_TYPE --prefix artifacts

      - name: Copy stdlib (Windows g++)
        if: runner.os == 'Windows' && matrix.config.cxx == 'g++'
        shell: bash
        run: |
          cp /c/ProgramData/Chocolatey/lib/mingw/tools/install/mingw64/x86_64-w64-mingw32/lib/libstdc++-6.dll $GITHUB_WORKSPACE/artifacts

      - name: Set Tag Name
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        # trim prefix from ref to get tag name
        run: echo "TAG_NAME=${GITHUB_REF#'refs/tags/'}" >> $GITHUB_ENV

      - name: Archive Release
        uses: thedoctor0/zip-release@master
        if: startsWith(github.ref, 'refs/tags/')
        with:
          type: 'zip'
          path: artifacts
          filename: release_${{ env.TAG_NAME }}_${{ matrix.config.os }}_${{ matrix.config.cxx }}.zip
      - name: Release
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          files: |
            release_${{ env.TAG_NAME }}_${{ matrix.config.os }}_${{ matrix.config.cxx }}.zip
